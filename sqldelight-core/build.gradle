apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.grammarkit'

targetCompatibility = JavaVersion.VERSION_1_7
sourceCompatibility = JavaVersion.VERSION_1_7

test {
  enabled = false
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
    showExceptions true
    showStackTraces true
    showCauses true
  }
}

sourceSets {
  main.java.srcDir "src/generated/kotlin"
}

dependencies {
  implementation deps.kotlinPoet
  implementation deps.kotlin.stdlib
  compile deps.sqlitePsi
  compile deps.moshi

  // Required by intellij core
  compileOnly deps.guava
  compileOnly deps.intellijCore

  testImplementation deps.intellijCore
  testImplementation deps.junit
  testImplementation deps.truth
  testImplementation project(':sqldelight-test-util')
}

task pluginVersion {
  def outputDir = file("src/generated/kotlin")

  inputs.property 'version', version
  outputs.dir outputDir

  doLast {
    def versionFile = file("$outputDir/com/squareup/sqldelight/Version.kt")
    versionFile.parentFile.mkdirs()
    versionFile.text = """// Generated file. Do not edit!
package com.squareup.sqldelight

val VERSION = "${project.version}"
"""
  }
}

import org.jetbrains.grammarkit.tasks.GenerateParser

task generateSqlDelightParser(type: GenerateParser) {
  source "src/main/grammars/sqldelight.bnf"
  targetRoot = 'src/generated/kotlin/'
  pathToParser '/com/squareup/sqldelight/core/parser/SampleParser.java'
  pathToPsiRoot '/com/squareup/sqldelight/core/psi'
  purgeOldFiles = true
}

tasks.getByName('compileKotlin').dependsOn('pluginVersion')
tasks.getByName('compileKotlin').dependsOn('generateSqlDelightParser')

//apply from: "$rootDir/gradle/gradle-mvn-push.gradle"
apply from: "${rootDir}/gradle/knarchstuff/configpublish.gradle"

if(project.hasProperty('deployGradle')) {
  apply from: "${rootDir}/gradle/knarchstuff/configbintray.gradle"
}
